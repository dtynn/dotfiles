set nocompatible
set number

filetype plugin indent on
syntax on

colorscheme dark_plus

set autoindent             " Indent according to previous line.
set autoread
set noswapfile
set nowrap
set smarttab
set tabstop=4
set shiftwidth=4
set encoding=utf-8
set fileencodings=utf-8,chinese,latin-1
set cursorline
set omnifunc=syntaxcomplete#Complete
set completeopt=menu,menuone,preview,noselect,noinsert
set splitbelow
set splitright
set backspace=indent,eol,start
set hidden
set laststatus  =2
set display     =lastline
set showmode
set showcmd
set lazyredraw
set scrolloff=5
set hlsearch
set clipboard=unnamed

" set incsearch

let g:rustfmt_autosave = 0

let g:ale_rust_rls_toolchain = 'stable'
let g:ale_linters = {'rust': ['cargo']}
let g:ale_lint_on_text_changed = 'never'
let g:ale_lint_on_enter = 1
let g:ale_fixers = {
\   '*': ['remove_trailing_lines', 'trim_whitespace'],
\   'rust': ['rustfmt'],
\}
let g:ale_fix_on_save = 1
let g:ale_close_preview_on_insert = 1

let g:nerdtree_tabs_open_on_console_startup = 1
let NERDTreeHighlightCursorline = 1
let NERDTreeShowLineNumbers = 1

let g:airline#extensions#tabline#enabled = 1

" set wildignore+=*/target/*
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/]((\.(git|hg|svn))|target)$',
  \ 'file': '\v\.(exe|so|dll)$',
  \ 'link': '',
  \ }
let g:ctrlp_prompt_mappings = {
    \ 'AcceptSelection("e")': ['<c-t>'],
    \ 'AcceptSelection("t")': ['<cr>', '<2-LeftMouse>'],
    \ }

let g:ackprg = 'ag --nogroup --nocolor --column'
let g:ack_autoclose = 1

let g:ycm_min_num_of_chars_for_completion = 2
let g:ycm_min_num_identifier_candidate_chars = 2
let g:ycm_seed_identifiers_with_syntax = 1
let g:ycm_key_list_stop_completion = ['<enter>']
let g:ycm_filetype_whitelist = {'rust': 1, 'c': 1}
let g:ycm_racerd_binary_path = 'racerd'
let g:ycm_goto_buffer_command = 'split'
" let g:ycm_goto_buffer_command = 'same-buffer'
let g:ycm_semantic_triggers = get(g:, 'ycm_semantic_triggers', {})
let g:ycm_semantic_triggers.rust = ['.', ':', 're![\w-]{2}']

let g:complete_parameter_use_ultisnips_mapping = 1
let g:UltiSnipsExpandTrigger="<C-e>"
let g:UltiSnipsListSnippets='<C-space>'
let g:UltiSnipsJumpForwardTrigger="<C-j>"
let g:UltiSnipsJumpBackwardTrigger="<C-k>"

let g:smartim_default = 'com.apple.keylayout.US'

function! Multiple_cursors_before()
  let g:smartim_disable = 1
endfunction
function! Multiple_cursors_after()
  unlet g:smartim_disable
endfunction

packloadall
silent! helptags ALL

inoremap <silent> jj <ESC>
inoremap <silent> ;; <ESC>A;
inoremap <silent> ,, <ESC>A,
nnoremap <silent> ;; :update<CR>

nnoremap <silent> gvt :vert term<CR>
nnoremap <silent> gc :let @/ = ""<CR>
nnoremap gs :Ack!<SPACE>
nnoremap gq :cclose<CR>

nmap gd :tab YcmCompleter GoTo<CR>

nmap <silent> <C-k> <Plug>(ale_previous_wrap)
nmap <silent> <C-j> <Plug>(ale_next_wrap)
nnoremap tt :NERDTreeToggle<CR>
nnoremap tf :NERDTreeFocus<CR>

inoremap <silent><expr> ( complete_parameter#pre_complete("()")
smap <c-j> <Plug>(complete_parameter#goto_next_parameter)
imap <c-j> <Plug>(complete_parameter#goto_next_parameter)
smap <c-k> <Plug>(complete_parameter#goto_previous_parameter)
imap <c-k> <Plug>(complete_parameter#goto_previous_parameter)

au FileType rust nnoremap gh :ALEHover<CR>
au FileType rust nnoremap ga :ALEDetail<CR>
