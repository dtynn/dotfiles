set nocompatible
set number

filetype plugin indent on
syntax on

colorscheme dark_plus

set splitright
set autoindent             " Indent according to previous line.
set autoread
set noswapfile
set nowrap
set smarttab
set expandtab
set tabstop=4
set shiftwidth=4
set encoding=utf-8
set fileencodings=utf-8,chinese,latin-1
set cursorline
" set omnifunc=syntaxcomplete#Complete
set completeopt=preview,menu,menuone,noselect,noinsert
set splitbelow
set splitright
set backspace=indent,eol,start
set hidden
set laststatus  =2
set display     =lastline
set showmode
set showcmd
set cmdheight=2
set lazyredraw
set scrolloff=5
set hlsearch
set foldmethod=indent
set nofoldenable
" set runtimepath+=~/.vim/mysnippets
" use .vimrc in cwd
set exrc

" set incsearch
let mapleader = "\<Space>"

" let g:rustfmt_autosave = 0
" let g:syntastic_rust_checkers = []

" let g:ale_rust_rls_toolchain = 'stable'
" let g:ale_history_log_output = 1
let g:ale_linters = {
\   'go': ['gobuild', 'golangci-lint'],
\   'rust': ['cargo'],
\   'typescript': ['tslint', 'typecheck'],
\   'proto': ['prototool', 'protoc-gen-lint'],
\}
let g:ale_lint_on_text_changed = 'never'
let g:ale_lint_on_enter = 1
let g:ale_fixers = {
\   '*': ['remove_trailing_lines', 'trim_whitespace'],
\   'rust': ['rustfmt'],
\   'go': ['gofmt'],
\   'typescript': ['prettier'],
\   'proto': ['clang-format'],
\}
let g:ale_fix_on_save = 1
let g:ale_close_preview_on_insert = 1
let g:ale_rust_cargo_check_tests = 1
let g:ale_rust_cargo_use_clippy = 1
let g:ale_rust_cargo_default_feature_behavior = 'all'
let g:ale_go_golangci_lint_package = 1
let g:ale_go_golangci_lint_options = '--max-issues-per-linter 20'

let g:nerdtree_tabs_open_on_console_startup = 1
let g:NERDTreeChDirMode = 2
let NERDTreeHighlightCursorline = 1
let NERDTreeShowLineNumbers = 1


" set wildignore+=*/target/*
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/]((\.(git|hg|svn))|target)$',
  \ 'file': '\v\.(exe|so|dll)$',
  \ 'link': '',
  \ }
let g:ctrlp_prompt_mappings = {
    \ 'AcceptSelection("e")': ['<c-t>'],
    \ 'AcceptSelection("t")': ['<cr>', '<2-LeftMouse>'],
    \ }

let g:ackprg = 'ag --nogroup --nocolor --column --ignore-dir target'
let g:ack_autoclose = 1

" let g:ycm_min_num_of_chars_for_completion = 2
" let g:ycm_min_num_identifier_candidate_chars = 2
" let g:ycm_seed_identifiers_with_syntax = 1
" let g:ycm_key_list_stop_completion = ['<enter>']
" let g:ycm_filetype_whitelist = {'rust': 1, 'c': 1, 'go': 1, 'proto': 1, 'typescript': 1,}
" let g:ycm_racerd_binary_path = 'racerd'
" let g:ycm_goto_buffer_command = 'split-or-existing-window'
" let g:ycm_goto_buffer_command = 'split'
" let g:ycm_goto_buffer_command = 'same-buffer'
" let g:ycm_semantic_triggers = get(g:, 'ycm_semantic_triggers', {})
" let g:ycm_semantic_triggers.rust = ['.', ':', 're![\w-]{2}']
" let g:ycm_semantic_triggers.go = ['.', 're![\w-]{2}']
" let g:ycm_semantic_triggers.proto = ['.', 're![\w-]{2}']
" let g:ycm_semantic_triggers.typescript = ['.', 're![\w-]{2}']
" let g:ycm_autoclose_preview_window_after_completion = 1
" let g:ycm_autoclose_preview_window_after_insertion = 1
" let g:ycm_echo_current_diagnostic = 0
" let g:ycm_show_diagnostics_ui = 0
" let g:ycm_enable_diagnostic_signs = 0
" let g:ycm_enable_diagnostic_highlighting = 0

" let g:ycm_language_server =
"   \ [
"   \   {
"   \     'name': 'rust',
"   \     'cmdline': [ 'rls' ],
"   \     'filetypes': [ 'rust' ]
"   \   },
"   \   {
"   \     'name': 'go',
"   \     'cmdline': [ 'gopls' ],
"   \     'filetypes': [ 'go' ]
"   \   }
"   \ ]

" let g:UltiSnipsExpandTrigger="<C-e>"
" let g:UltiSnipsListSnippets='<C-space>'
" let g:UltiSnipsJumpForwardTrigger="<C-j>"
" let g:UltiSnipsJumpBackwardTrigger="<C-k>"

let g:NERDSpaceDelims = 1
let g:NERDDefaultAlign = 'left'
let g:NERDCommentEmptyLines = 0
let g:NERDTrimTrailingWhitespace = 1
let NERDTreeShowHidden=1

" let g:go_fmt_autosave = 0
" let g:go_fmt_command = "goimports"
" let g:go_def_reuse_buffer = 1
" let g:go_def_mapping_enabled = 0
" let g:go_def_mode = 'gopls'
" let g:go_info_mode = 'gopls'

let g:lightline = {
      \ 'colorscheme': 'seoul256',
      \ }

let g:VM_theme            = 'purplegray'
let g:VM_maps = {}
let g:VM_maps["Add Cursor Down"]             = '<Leader>j'
let g:VM_maps["Add Cursor Up"]               = '<Leader>k'

" let g:complete_parameter_log_level = 1


packloadall
silent! helptags ALL

inoremap <silent> jk <ESC>
inoremap <silent> zz <ESC>o
inoremap <silent> xx <ESC>O
inoremap <silent> ;; <ESC>A
inoremap <silent> ;] <ESC>]}a
inoremap <silent> ;) <ESC>2])a
nnoremap <silent> zz :update<CR>

nnoremap <c-h> ^
nnoremap <c-l> $
vnoremap <c-h> ^
vnoremap <c-l> $
inoremap <c-l> <c-o>a

vmap <Leader>y "+y
vmap <Leader>d "+d
nmap <Leader>p "+p
nmap <Leader>P "+P
vmap <Leader>p "+p
vmap <Leader>P "+P

nmap <Leader>x gt
nmap <Leader>z gT

nmap <Leader>b :vnew<CR>

vnoremap <silent> y y`]
sunmap y
vnoremap <silent> p p`]
sunmap p
nnoremap <silent> p p`]

vmap <Leader>( S(
vmap <Leader>[ S[
vmap <Leader>{ S{
vmap <Leader>" S"
vmap <Leader>' S'
vmap <Leader>` S`
vmap <Leader>< Sa

vnoremap <Leader>y :OSCYank<CR>

" CompleteParameters
" inoremap <silent><expr> <C-f> complete_parameter#pre_complete("()")
" smap <c-j> <Plug>(complete_parameter#goto_next_parameter)
" imap <c-j> <Plug>(complete_parameter#goto_next_parameter)
" smap <c-k> <Plug>(complete_parameter#goto_previous_parameter)
" imap <c-k> <Plug>(complete_parameter#goto_previous_parameter)

nnoremap <silent> gvt :vert term<CR>
nnoremap <silent> gc :let @/ = ""<CR>
nnoremap <Leader>s :Ack!<SPACE>
nnoremap gq :cclose<CR>

" nmap gd :vertical YcmCompleter GoTo<CR>
nmap gd :call CocActionAsync('jumpDefinition', 'vsplit')<CR>
nmap gr <Plug>(coc-references)
nmap gi <Plug>(coc-implementation)
nmap <Leader>gd :call CocActionAsync('jumpDefinition', 'tab drop')<CR>

nmap <silent> <C-k> <Plug>(ale_previous_wrap)
nmap <silent> <C-j> <Plug>(ale_next_wrap)
nnoremap tt :NERDTreeToggle<CR>
nnoremap tm :NERDTreeMirror<CR>
nnoremap tf :NERDTreeFocus<CR>
nnoremap tr :NERDTreeFind<CR>

au FileType rust nnoremap gh :ALEHover<CR>
au FileType rust nnoremap ga :ALEDetail<CR>
au FileType rust nnoremap <Leader>al O<ESC>dd:update<CR>

" au FileType go setlocal omnifunc=""

au FileType proto let b:ale_c_clangformat_options = '-style=google -assume-filename=temp.proto'
au Filetype proto setlocal ts=2 sw=2 expandtab

au Filetype typescript setlocal ts=2 sw=2 expandtab
au Filetype yaml setlocal ts=2 sw=2 expandtab

call NERDTreeAddKeyMap({'key': 't', 'callback': 'NERDTreeMyOpenInTab', 'scope': 'FileNode', 'override': 1 })
function NERDTreeMyOpenInTab(node)
    call a:node.open({'reuse': "all", 'where': 't'})
endfunction

let g:coc_snippet_next = ''
let g:coc_snippet_prev = ''

function! s:check_back_space() abort
let col = col('.') - 1
return !col || getline('.')[col - 1]  =~ '\s'
endfunction

" Insert <tab> when previous text is space, refresh completion if not.
inoremap <silent><expr> <TAB>
\ coc#pum#visible() ? coc#pum#next(1):
\ <SID>check_back_space() ? "\<Tab>" :
\ coc#refresh()
inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

function! s:check_back_space() abort
let col = col('.') - 1
return !col || getline('.')[col - 1]  =~# '\s'
endfunction


inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

inoremap <silent><expr> <C-f> coc#pum#visible() ? coc#_select_confirm()
            \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

" inoremap <expr> <C-f> pumvisible() ? "\<C-y>" : "\<CR>"
" " imap <C-j> <Nop>

" inoremap <silent><expr> <TAB>
"       \ pumvisible() ? "\<C-n>" :
"       \ <SID>check_back_space() ? "\<TAB>" :
"       \ coc#refresh()
" inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

" function! s:check_back_space() abort
"   let col = col('.') - 1
"   return !col || getline('.')[col - 1]  =~# '\s'
" endfunction

" inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
